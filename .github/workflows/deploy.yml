name: Deploy agent-task-logger-frontend Static Site

on:
  push:
    branches: [main, 'prod**']
  pull_request:
    branches: ['prod**']

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_VAR_function_name: agent-task-logger-frontend
      TF_VAR_aws_region: eu-west-2
      S3_BUCKET: 533267084389-lambda-artifacts

    steps:
      - uses: actions/checkout@v4

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "Environment: dev (main branch)"
          elif [[ "${{ github.ref }}" == refs/heads/prod* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "Environment: prod (production branch)"
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "Environment: dev (default)"
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Frontend with Vite
        run: |
          ENVIRONMENT=${{ steps.env.outputs.environment }}

          echo "🏗️  Building frontend with Vite for $ENVIRONMENT environment..."

          # Create .env.production for build-time variables
          cat > .env.production <<EOF
          VITE_API_URL=${{ secrets.API_URL }}
          VITE_AWS_REGION=eu-west-2
          VITE_ENVIRONMENT=$ENVIRONMENT
          EOF

          echo "🔨 Building Vite application..."
          npm run build

          echo "✅ Vite build completed"

          # Verify build output
          if [ -d "dist" ]; then
            echo "✓ Build directory created"
            ls -lh dist/
            echo "Assets:"
            ls -lh dist/assets/
          else
            echo "❌ Build failed - dist directory not found"
            exit 1
          fi

      - name: AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::533267084389:role/github
          aws-region: eu-west-2

      - name: Create S3 bucket if not exists
        run: |
          echo "Checking if S3 bucket exists..."
          if aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            echo "✓ S3 bucket $S3_BUCKET already exists"
          else
            echo "Creating S3 bucket $S3_BUCKET..."
            aws s3api create-bucket \
              --bucket "$S3_BUCKET" \
              --region eu-west-2 \
              --create-bucket-configuration LocationConstraint=eu-west-2

            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket "$S3_BUCKET" \
              --versioning-configuration Status=Enabled

            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket "$S3_BUCKET" \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'

            echo "✓ S3 bucket $S3_BUCKET created successfully"
          fi

      - name: Upload Static Site to S3
        id: upload
        run: |
          ENVIRONMENT=${{ steps.env.outputs.environment }}
          S3_FRONTEND_PATH="s3://$S3_BUCKET/agent-task-logger-frontend/$ENVIRONMENT/frontend/"

          echo "🚀 Uploading static site to $S3_FRONTEND_PATH"

          # Sync entire dist folder to S3
          # HTML files - no cache (always revalidate)
          aws s3 sync dist/ "$S3_FRONTEND_PATH" \
            --exclude "assets/*" \
            --cache-control "public, max-age=0, must-revalidate" \
            --delete

          # Assets - long cache (immutable with content hashes)
          aws s3 sync dist/assets/ "${S3_FRONTEND_PATH}assets/" \
            --cache-control "public, max-age=31536000, immutable" \
            --delete

          echo "s3_prefix=agent-task-logger-frontend/$ENVIRONMENT/" >> $GITHUB_OUTPUT
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "✓ Static site uploaded successfully"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform init + apply
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          # Update terraform backend key with environment
          terraform -chdir=terraform init \
            -backend-config="region=eu-west-2" \
            -backend-config="bucket=533267084389-tf-state" \
            -backend-config="key=aws/$ENVIRONMENT/agents/agent-task-logger-frontend" \
            -backend-config="encrypt=true" \
            -backend-config="use_lockfile=true"

          terraform -chdir=terraform apply -auto-approve \
            -var="s3_bucket=${{ steps.upload.outputs.s3_bucket }}" \
            -var="s3_prefix=${{ steps.upload.outputs.s3_prefix }}" \
            -var="environment=$ENVIRONMENT"

      - name: Invalidate CloudFront Cache
        run: |
          cd terraform
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)

          echo "🔄 Invalidating CloudFront cache for distribution $DISTRIBUTION_ID"

          aws cloudfront create-invalidation \
            --distribution-id "$DISTRIBUTION_ID" \
            --paths "/*"

          echo "✓ CloudFront cache invalidation initiated"

      - name: Show endpoints
        run: |
          cd terraform
          echo "::notice title=Environment::${{ steps.env.outputs.environment }}"
          echo "::notice title=Frontend URL::$(terraform output -raw frontend_url)"
          echo "::notice title=CloudFront Distribution::$(terraform output -raw cloudfront_distribution_id)"
          echo "::notice title=S3 Assets Bucket::$(terraform output -raw assets_bucket_name)"

      - name: Clean up local artifacts
        run: |
          echo "Cleaning up local build artifacts..."
          rm -rf dist/
          echo "✓ Local artifacts cleaned up"
